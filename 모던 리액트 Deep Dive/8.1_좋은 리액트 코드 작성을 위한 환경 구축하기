# 08장 좋은 리액트 코드 작성하기

## 8.1 ESLint를 활용한 정적 코드 분석

### 정적 코드 분석이란?

코드의 실행과는 별개로 코드 그 자체만으로 코드 스멜(잠재적으로 버그를 야기할 수 있는 코드)을 찾아내어
문제의 소지가 있는 코드를 사전에 수정하는 것

__정적 코드 분석을 위해 가장 많이 사용되는 도구가 바로 ESLint이다.__

### ESLint 살펴보기

#### eslint의 코드 분석 방식

1. 자바스크립트 코드를 문자열로 읽는다
2. 자바스크립트 코드를 분석할 수 있는 파서(parser)로 코드를 구조화한다.
    
    → 자바스크립트 파서 중 기본값은 espree이다.
    
3. 2번에서 구조화한 트리를 AST(Abstract Syntax Tree)라 하며, 이 트리를 각종 규칙과 대조한다.
4. 규칙과 다른 코드는 알리거나 수정한다.

```javacsript
function hello(str) {}

     |
     | espree 파서로 분석
     |
     |
     v


{
	"type": "Program",
	"start": 0,
	"end": 22,
	"range": [0,22],
	"body": []
	.......
}
```

+) ESLint가 espree로 분석하고 어떤 코드가 잘못된 코드인지 정하는 기준을 **rules**라 하고,

특정한 규칙의 모음을 **plugins**라 한다.

### eslint-plugin과 eslint-config
    - eslint-plugin: 이 접두사로 시작하는 플러그인은 앞서 언급했던 규칙을 모아놓은 패키지
        
        ex) eslint-plugin-import: import문에 대한 규칙 제공
        
        eslint-plugin-react: 리액트 관련 규칙을 제공
        
        → JSX 배열에 키를 선언하지 않았다는 경고는 eslint-plugin-react가 제공하는 react/jsx-key가 보여준 것이다.
        
    
    - eslint-config: eslint-plugin을 한데 묶어 완벽하게 한 세트로 제공하는 패키지
        
        → eslint를 일일이 설정하는 것이 만만치 않기 때문에 대부분의 경우 eslint-config를 설치해 사용
        
        → eslint-config-airbnb: eslint-config 중 가장 많이 사용되는 패키지
        
        → @titicaca/triple-config-kit: 한국 커뮤니티에서 운영되는 eslint-config 중 유지보수가 활발한 패키지

### 나만의 ESLint 규칙 만들기
  - 이미 존재하는 규칙 커스터마이징: import React를 제거하기 위한 eslint 규칙 만들기

```javascript
// .eslintrc.js

module.exports = {
  rules: {
    "no-restricted-imports": [
      "error",
      {
        // paths에 금지시킬 모듈 추가
        paths: [
          {
            name: "react",
            importNames: ["default"],
            message:
              "import React from 'react'는 React 17부터 더 이상 필요하지 않습니다. 필요한 것만 React로부터 import해서 사용해 주세요.",
          },
        ],
      },
    ],
  },
};
```

- 완전히 새로운 규칙 만들기: New Date 금지하는 규칙
    - 사용 중인 기기에 상관없이 현재 시간 반환하도록 new Date() 사용 금지
        
        ```jsx
        module.exports = {
          meta: {
            type: "suggestion",
            docs: {
              description: "disallow use of the new Date()",
              recommended: false,
            },
          },
          fixable: "code",
          schema: [],
          messages: {
            message:
              "new Date()는 클라이언트에서 실행 시 해당 기기의 시간에 의존적이라 정확하지 않습니다. 현재 시간이 필요하다면 ServerDate()를 사용해 주세요.",
          },
          create: function (context) {
            return {
              NewExpression: function (node) {
                if (node.callee.name === "Date" && node.arguments.length === 0) {
                  context.report({
                    node: node,
                    messageId: "message",
                    fix: function (fixer) {
                      return fixer.replaceText(node, "ServerDate()");
                    },
                  });
                }
              },
            };
          },
        };
        ```
        

### 주의할 점
    - Prettier와의 충돌
        - Prettier는 코드의 포매팅을 도와주는 도구로, 코드를 정적 분석한다는 점에서 ESLInt와 같지만, 지향하는 목표가 다름(eslint: 코드의 잠재적인 문제 분석, prettier: 줄바꿈, 들여쓰기 등과 같은 포매팅)
        - eslint에서도 prettier가 처리하는 작업을 수행 가능
            
            → 규칙 충돌 발생
            
        - 해결방법
            1. 알아서 잘 짜라
            2. 자바스크립트나 타입스크립트는 eslint에, 그 외의 파일(마크다운, JSON 등)은 Prettier에 맡긴다. 대신 자바스크립트에 필요한 prettier 규칙은 esLint-plugin-prettier를 사용한다.
    - 규칙에 대한 예외 처리, 그리고 react-hooks/no-exhaustive-deps
        - 일부 코드에서 특정 규칙을 임시로 제외시키고 싶다면 eslint-disable-  주석 사용
            
            ```jsx
            // 특정 줄만 제외
            console.log('hello world') // eslint-disable no-console
            ```
            
        - 이러한 규칙을 가장 많이 사용하게 되는 경우는 **//** eslint-disable-line **no-exhaustive-deps이다.**
            
            **(exhaustive deps:** useEffect나 useMemo와 같이 의존 배열이 필요한 훅에 의존성 배열을 제대로 선언했는지 확인하는 역할**)**
            
        - **eslint-disable-line no-exhaustive-deps를 사용하면 발생할 수 있는 문제**
            - 괜찮다고 임의로 판단한 경우
            
             해당 의존성 배열의 변수가 컴포넌트와 별개로 동작한다는 의미→ 해당 변수를 어디 선언할지 다시 고민해야함
            
             정말 괜찮아도 괜찮지 않은 코드에서 동일하게 사용해 문제 발생
            
            - 의존성 배열이 너무 긴 경우
                
                useEffect 내부 함수가 길다는 의미 → 가독성과 안정성 확보해야함
                
            - 마운트 시점에 한번만 실행하고 싶은 경우
                
                이 방법은 함수형 컴포넌트의 패러다임과는 맞지 않을 가능성이 있고, 컴포넌트의 상태값과 별개로 부수 효과가 되어 **컴포넌트의 상태와 불일치** 발생. **상태와 관계 없이 한 번만 실행**돼야 하는 것이 있다면 **해당 컴포넌트에 존재할 이유가 없으니 이동**을 고려해 볼 것.
                
    - ESLint 버전 충돌
        - ESLint의 의존성을 peerDependencies로 명시하여 해결
